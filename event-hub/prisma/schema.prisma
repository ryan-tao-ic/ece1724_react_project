// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                  @id @default(uuid())
  email                 String                  @unique
  isActivated           Boolean                 @default(false)
  registrationDate      DateTime                @default(now())
  firstName             String
  lastName              String
  passwordHash          String
  role                  UserRole                @default(USER)
  activatedAt           DateTime?
  updatedAt             DateTime                @updatedAt
  phoneNumber           String?
  affiliation           String?
  occupancy             String?
  expertise             String?
  
  // Relations
  registrations         EventUserRegistration[]
  createdEvents         Event[]                 @relation("EventCreator")
  reviewedEvents        Event[]                 @relation("EventReviewer")
  lecturerEvents        EventLecturers[]
  uploadedMaterials     EventMaterials[]
  qaMessages            QAMessages[]
}

enum UserRole {
  USER
  LECTURER
  STAFF
  ADMIN
}

model Event {
  id                  String                 @id @default(uuid())
  name                String
  description         String?                @db.Text
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  location            String
  eventStartTime      DateTime
  eventEndTime        DateTime
  availableSeats      Int
  ticketSaleRequired  Boolean                @default(false)
  categoryId          String
  status              EventStatus            @default(DRAFT)
  isArchived          Boolean                @default(false)
  waitlistCapacity    Int                    @default(0)
  reviewComment       String?                @db.Text
  customizedQuestion  Json?
  createdBy           String
  reviewedBy          String?
  
  // Relations
  category            EventCategory          @relation(fields: [categoryId], references: [id])
  creator             User                   @relation("EventCreator", fields: [createdBy], references: [id])
  reviewer            User?                  @relation("EventReviewer", fields: [reviewedBy], references: [id])
  registrations       EventUserRegistration[]
  lecturers           EventLecturers[]
  materials           EventMaterials[]
  lounges             Lounge[]
  qaMessages          QAMessages[]
}

enum EventStatus {
  DRAFT
  PENDING_REVIEW
  APPROVED
  PUBLISHED
  CANCELLED
}

model EventUserRegistration {
  id                     String                @id @default(uuid())
  eventId                String
  userId                 String
  status                 RegistrationStatus    @default(REGISTERED)
  registrationTime       DateTime              @default(now())
  checkInTime            DateTime?
  checkOutTime           DateTime?
  qrCode                 String                @unique
  waitlistPosition       Int?
  customizedQuestionAnswer Json?

  // Relations
  event                  Event                 @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user                   User                  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId])
  @@index([status])
  @@index([registrationTime])
  @@index([qrCode])
}

enum RegistrationStatus {
  REGISTERED
  WAITLISTED
  CANCELLED
  ATTENDED
}

model EventLecturers {
  id              String    @id @default(uuid())
  eventId         String
  lecturerId      String

  // Relations
  event           Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  lecturer        User      @relation(fields: [lecturerId], references: [id], onDelete: Cascade)

  @@unique([eventId, lecturerId])
}

model EventCategory {
  id              String    @id @default(uuid())
  name            String    @unique
  
  // Relations
  events          Event[]
}

model EventMaterials {
  id              String    @id @default(uuid())
  eventId         String
  filePath        String
  fileName        String
  fileType        String
  uploadedBy      String
  uploadedAt      DateTime  @default(now())

  // Relations
  event           Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  uploader        User      @relation(fields: [uploadedBy], references: [id], onDelete: Cascade)
}

model Lounge {
  id              String    @id @default(uuid())
  eventId         String
  openedAt        DateTime  @default(now())
  closedAt        DateTime?
  isActive        Boolean   @default(true)

  // Relations
  event           Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model QAMessages {
  id              String    @id @default(uuid())
  eventId         String
  userId          String
  content         String    @db.Text
  timestamp       DateTime  @default(now())

  // Relations
  event           Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}
